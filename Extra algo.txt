public void BasicSimulation(){
         Reset(); 
         ArrayList <Vehicle> Vehicles_List = new ArrayList<>();
         ArrayList <Node> Remaining_Nodes = new ArrayList<>();
         Node temp = head.nextVertex; //dont need to add warehouse (head)
         
         while (temp != null) { 
         Remaining_Nodes.add(temp);
         temp = temp.nextVertex;}
         //loop to create vehicle for each big node
         for (int i = 1; i< Number_of_customer; i++){
           if (getNode(i).getCapacity() < (Vehicle.getMax_Capacity()/3) * 2) continue;
             Vehicle v = new Vehicle();  //start from warehouse
             v.addNode(head); 
             v.addNode(getNode(i));
             Remaining_Nodes.remove(getNode(i));
             Vehicles_List.add(v);}
            
         //after all big nodes are created with individual vehicle, evaluate leftover small node
              //forecast the extra needed vehicles, create them using closest unserviced customer
                int Number_Extra_Vehicles = (getCapacityNeeded() - (Vehicles_List.size() * Vehicle.getMax_Capacity()))
                         /Vehicle.getMax_Capacity();
                 Number_Extra_Vehicles += 1 ; //because we will get 2.4 = 2 so round up to 3
                
                for (int i = 0; i<Number_Extra_Vehicles ; i++){
                    Node [] choice  = Sorted(head,Remaining_Nodes.toArray());
                    Vehicle v = new Vehicle();
                    v.addNode(head);
                    v.addNode(choice[0]);
                    Remaining_Nodes.remove(choice[0]);
                    Vehicles_List.add(v);} 
               
               while (!Remaining_Nodes.isEmpty()){
               Node [] choice = Sorted(Remaining_Nodes.toArray()); //sort remaining customer in descending order of capacity
               Node current = choice[0]; //give priority to customer with higher priority count
               int i =  Vehicle.PossibleSource(current, Vehicles_List);
               if (i == -1) { //get index of ideal vehicle to add this customer
                  Vehicle v = new Vehicle(); 
                  v.addNode(head);
                  v.addNode(current); 
                  Vehicles_List.add(v);
                  Remaining_Nodes.remove(current);
                   continue;}
               Vehicles_List.get(i).addNode(current);
               Remaining_Nodes.remove(current);}
         
       
         //everything done i have to add final destination
         for (int i = 0; i<Vehicles_List.size() ;i++){
             Vehicles_List.get(i).addNode(head);
             total_cost_path += (Vehicles_List.get(i)).getPath_Cost();}
          System.out.println("Basic simulation");
         System.out.println("Tour \nTotal Cost: " + total_cost_path);
         //display all vehicles 
         for (int i = 0; i< Vehicles_List.size() ; i++){
             System.out.println(Vehicles_List.get(i));}
       } 